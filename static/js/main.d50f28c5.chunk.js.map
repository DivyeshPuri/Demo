{"version":3,"sources":["actions/index.js","List.js","App.js","serviceWorker.js","reducers/index.js","index.js"],"names":["requestPosts","type","isFetching","clicked","receivePost","data","posts","List","props","useState","post","key","id","className","title","body","App","states","useSelector","state","dispatch","useDispatch","onClick","axios","get","then","json","status","console","log","map","index","data-uk-spinner","Boolean","window","location","hostname","match","initState","store","compose","applyMiddleware","thunk","createStore","action","Object","assign","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"0QAmBO,IAAMA,EAAe,WAC1B,MAAO,CACLC,KAAM,eACNC,YAAY,EACZC,SAAS,IAIAC,EAAc,SAACC,GAC1B,MAAO,CACLJ,KAAM,eACNC,YAAY,EACZI,MAAOD,EACPF,SAAS,I,QClBEI,EAZF,SAACC,GAAW,IAAD,EACEC,mBAASD,GADX,mBACfE,EADe,UAEtB,OACE,yBAAKC,IAAKD,EAAKL,KAAKO,IAChB,yBAAKC,UAAU,4EACX,wBAAIA,UAAU,iBAAiBH,EAAKL,KAAKS,OACzC,2BAAIJ,EAAKL,KAAKU,SCqBXC,EAvBH,WACV,IAAMC,EAASC,aAAY,SAAAC,GAAK,OAAIA,KAC9BC,EAAWC,cACjB,OACE,yBAAKR,UAAU,cACb,yBAAKA,UAAU,gBACb,4BAAQA,UAAU,6DAA6DS,QAAS,kBAAMF,GFT7F,SAAUA,GAEf,OADAA,EAASpB,KACFuB,IAAMC,IAAN,8CACJC,MAAK,SAAAC,GACJ,GAAoB,MAAhBA,EAAKC,OAAgB,CACvB,GAAID,EACF,OAAON,EAAShB,EAAYsB,EAAKrB,OAGjCuB,QAAQC,IAAI,kCEAhB,aAGAZ,EAAOX,MACL,yBAAKO,UAAU,6CAEXI,EAAOX,MAAMwB,KAAI,SAACzB,EAAM0B,GAAP,OACf,kBAAC,EAAD,CAAM1B,KAAMA,EAAMM,IAAKoB,QAI7Bd,EAAOd,SAAW,yBAAK6B,kBAAiB,GAAInB,UAAU,2BCX5CoB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,olBClBN,IAAMC,EAAY,CAChBhC,MAAO,KACPJ,YAAY,EACZC,SAAS,GCYLoC,EAAQC,YAAQC,YAAgBC,KAAxBF,CAAgCG,IAAhCH,EDTa,WAAgC,IAA/BrB,EAA8B,uDAAtBmB,EAAWM,EAAW,uCACxD,OAAQA,EAAO3C,MACb,IAAK,eACH,OAAO4C,OAAOC,OAAO,GAAI3B,EAAlB,KACFA,EADE,CAELjB,YAAY,EACZC,SAAS,KAEb,IAAK,eACH,OAAO,EAAP,GACKgB,EADL,CAEEjB,YAAY,EACZC,SAAS,EACTG,MAAOsC,EAAOtC,QAElB,QACE,OAAOa,MCLb4B,IAASC,OACL,kBAAC,IAAD,CAAUT,MAAOA,GACb,kBAAC,EAAD,OAEFU,SAASC,eAAe,SF4GxB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM5B,MAAK,SAAA6B,GACjCA,EAAaC,kB","file":"static/js/main.d50f28c5.chunk.js","sourcesContent":["import axios from 'axios';\r\n\r\nexport function getPosts() {\r\n  return function (dispatch) {\r\n    dispatch(requestPosts())\r\n    return axios.get(`https://jsonplaceholder.typicode.com/posts`)\r\n      .then(json => {\r\n        if (json.status === 200) {\r\n          if (json) {\r\n            return dispatch(receivePost(json.data))\r\n          }\r\n          else {\r\n            console.log('Error in redux action')\r\n          }\r\n        }\r\n      })\r\n  }\r\n}\r\n\r\nexport const requestPosts = () => {\r\n  return {\r\n    type: 'REQUEST_POST',\r\n    isFetching: true,\r\n    clicked: true\r\n  }\r\n}\r\n\r\nexport const receivePost = (data) => {\r\n  return {\r\n    type: 'RECEIVE_POST',\r\n    isFetching: false,\r\n    posts: data,\r\n    clicked: false\r\n  }\r\n}","import React, { useState } from 'react';\r\n\r\nconst List = (props) => {\r\n  const [post, setPost] = useState(props)\r\n  return (\r\n    <div key={post.data.id}>\r\n        <div className=\"uk-card uk-card-body uk-card-hover uk-align-center uk-box-shadow-small\t\">\r\n            <h3 className=\"uk-card-title\">{post.data.title}</h3>\r\n            <p>{post.data.body}</p>\r\n        </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default List;","import React from 'react';\nimport './App.css';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { getPosts } from './actions/index';\nimport List from './List';\n\nconst App = () => {\n  const states = useSelector(state => state);\n  const dispatch = useDispatch();\n  return (\n    <div className=\"uk-section\">\n      <div className=\"uk-container\">\n        <button className=\"uk-button uk-button-primary uk-align-center uk-border-pill\" onClick={() => dispatch(getPosts())}>Get Post</button>\n      </div>\n      {\n        states.posts ?\n          <div className=\"uk-container uk-width-3-4 uk-align-center\">\n            {\n              states.posts.map((data, index) => (\n                <List data={data} key={index} />\n              ))\n            }\n          </div> :\n          states.clicked && <div data-uk-spinner={''} className=\"center uk-margin-top\"></div>\n      }\n    </div>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","const initState = {\r\n  posts: null,\r\n  isFetching: false,\r\n  clicked: false\r\n}\r\n\r\nexport const rootReducer = (state = initState, action) => {\r\n  switch (action.type) {\r\n    case 'REQUEST_POST':\r\n      return Object.assign({}, state, {\r\n        ...state,\r\n        isFetching: true,\r\n        clicked: true\r\n      })\r\n    case 'RECEIVE_POST':\r\n      return {\r\n        ...state,\r\n        isFetching: false,\r\n        clicked: false,\r\n        posts: action.posts\r\n      }\r\n    default:\r\n      return state\r\n  }\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {\n    createStore,\n    applyMiddleware,\n    compose\n} from 'redux';\nimport thunk from 'redux-thunk';\nimport { Provider } from 'react-redux';\nimport { rootReducer } from './reducers/index';\n\n\nconst store = compose(applyMiddleware(thunk))(createStore)(rootReducer);\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>\n    , document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}